// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "@hey-api/client-fetch";

import type {
  CreateChatCompletionV1ChatCompletionsPostData,
  CreateChatCompletionV1ChatCompletionsPostError,
  CreateChatCompletionV1ChatCompletionsPostResponse,
  CreateCompletionV1CompletionsPostData,
  CreateCompletionV1CompletionsPostError,
  CreateCompletionV1CompletionsPostResponse,
  CreateImageGenerationV1AudioGenerationPostData,
  CreateImageGenerationV1AudioGenerationPostError,
  CreateImageGenerationV1AudioGenerationPostResponse,
  CreateImageGenerationV1ImageGenerationPostData,
  CreateImageGenerationV1ImageGenerationPostError,
  CreateImageGenerationV1ImageGenerationPostResponse,
  CreateImageGenerationV1ImagesGenerationsPostData,
  CreateImageGenerationV1ImagesGenerationsPostError,
  CreateImageGenerationV1ImagesGenerationsPostResponse,
  CreateJanusGenerationV1JanusGenerationPostData,
  CreateJanusGenerationV1JanusGenerationPostError,
  CreateJanusGenerationV1JanusGenerationPostResponse,
  CreateMonadMemeGenerationV1ImageMemeGenerationPostData,
  CreateMonadMemeGenerationV1ImageMemeGenerationPostError,
  CreateMonadMemeGenerationV1ImageMemeGenerationPostResponse,
  ModelsPriceModelsModelNamePriceGetData,
  ModelsPriceModelsModelNamePriceGetError,
  ShowModelsV1ModelsGetData,
  ShowModelsV1ModelsGetResponse,
  UpdateConfigsV1ImageUpdateConfigsPostData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Create Chat Completion
 * Creates a completion for the chat message
 */
export const createChatCompletionV1ChatCompletionsPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateChatCompletionV1ChatCompletionsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateChatCompletionV1ChatCompletionsPostResponse,
    CreateChatCompletionV1ChatCompletionsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/chat/completions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Completion
 * Creates a completion for the chat message
 */
export const createCompletionV1CompletionsPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateCompletionV1CompletionsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCompletionV1CompletionsPostResponse,
    CreateCompletionV1CompletionsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/completions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update Configs
 */
export const updateConfigsV1ImageUpdateConfigsPost = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateConfigsV1ImageUpdateConfigsPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/image/update_configs",
    ...options,
  });
};

/**
 * Create Image Generation
 * Creates a generation for the text prompt
 */
export const createImageGenerationV1ImagesGenerationsPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateImageGenerationV1ImagesGenerationsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateImageGenerationV1ImagesGenerationsPostResponse,
    CreateImageGenerationV1ImagesGenerationsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/images/generations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Image Generation
 * Creates a generation for the text prompt
 */
export const createImageGenerationV1ImageGenerationPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateImageGenerationV1ImageGenerationPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateImageGenerationV1ImageGenerationPostResponse,
    CreateImageGenerationV1ImageGenerationPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/image/generation",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Monad Meme Generation
 * Creates a monad meme generation for the text prompt
 */
export const createMonadMemeGenerationV1ImageMemeGenerationPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateMonadMemeGenerationV1ImageMemeGenerationPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateMonadMemeGenerationV1ImageMemeGenerationPostResponse,
    CreateMonadMemeGenerationV1ImageMemeGenerationPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/image/meme_generation",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Models Price
 */
export const modelsPriceModelsModelNamePriceGet = <ThrowOnError extends boolean = false>(
  options: Options<ModelsPriceModelsModelNamePriceGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    ModelsPriceModelsModelNamePriceGetError,
    ThrowOnError
  >({
    url: "/models/{model_name}/price",
    ...options,
  });
};

/**
 * Create Image Generation
 * Creates a generation for the text prompt
 */
export const createImageGenerationV1AudioGenerationPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateImageGenerationV1AudioGenerationPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateImageGenerationV1AudioGenerationPostResponse,
    CreateImageGenerationV1AudioGenerationPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/audio/generation",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Janus Generation
 * Creates a generation for the text prompt
 */
export const createJanusGenerationV1JanusGenerationPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateJanusGenerationV1JanusGenerationPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateJanusGenerationV1JanusGenerationPostResponse,
    CreateJanusGenerationV1JanusGenerationPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/janus/generation",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Show Models
 * List the served models along with the count of inference nodes behind.
 */
export const showModelsV1ModelsGet = <ThrowOnError extends boolean = false>(
  options?: Options<ShowModelsV1ModelsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ShowModelsV1ModelsGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/models",
    ...options,
  });
};
